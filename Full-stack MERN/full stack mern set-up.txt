npm init -y
npm install mongoose express
create a new file called : server.js and fill it with the port information
run nodemon server.js to check and also check for express and mongoose if they are added in the package-json file
create a new folder called server
npx create-react-app <your app name here>




in the server folder add the following folders:

config
mongoose.config.js

controllers
person.controller.js

models
person.model.js

routes
person.routes.js

npm install axios inside the  client project directory

cd ..
npm install cors



within the src folder create two more folders


views
Main.js




components
PersonForm.js


****************************************************************************************
In the mongoose.config.js:

const mongoose = require('mongoose');
mongoose.connect("mongodb://localhost/crmdb", {
    useNewUrlParser: true,
    useUnifiedTopology: true,
})
    .then(() => console.log("Established a connection to the database"))
    .catch(err => console.log("Something went wrong when connecting to the database", err));



****************************************************************************************
In the person.model.js:

const mongoose = require('mongoose');
const PersonSchema = new mongoose.Schema({
    firstName: { type: String },
    lastName: { type: String }
}, { timestamps: true });
module.exports.Person = mongoose.model('Person', PersonSchema);

****************************************************************************************
In the server.js:

const express = require('express');
const cors = require('cors');
const app = express();
require('./server/config/mongoose.config'); // This is new
app.use(cors());
app.use(express.json()); // This is new
app.use(express.urlencoded({ extended: true })); // This is new
require('./server/routes/person.routes')(app);
app.listen(8000, () => {
    console.log("Listening at Port 8000")
})

*****************************************************************************************
In the person.controller.js:

const { Person } = require('../models/person.model');
module.exports.index = (request, response) => {
    response.json({
        message: "Hello World"
    });
}
    // The method below is new
module.exports.createPerson = (request, response) => {
    const { firstName, lastName } = request.body;
    Person.create({
        firstName,
        lastName
    })
        .then(person => response.json(person))
        .catch(err => response.json(err));
}




*****************************************************************************************
In the Preson.routes.js:

const PersonController = require('../controllers/person.controller');
module.exports = function(app){
    app.get('/api', PersonController.index);
    app.post('/api/people', PersonController.createPerson);
}

*****************************************************************************************

In the Main.js:

import React, { useEffect, useState } from 'react';
import PersonForm from '../components/PersonForm';
export default () => {
    return (
        <div>
           <PersonForm/>
        </div>
    )
}



******************************************************************************

In the PersonForm.js:

import React, { useState } from 'react'
import axios from 'axios';
export default () => {
    //keep track of what is being typed via useState hook
    const [firstName, setFirstName] = useState(""); 
    const [lastName, setLastName] = useState("");
    //handler when the form is submitted
    const onSubmitHandler = e => {
        //prevent default behavior of the submit
        e.preventDefault();
        //make a post request to create a new person
        axios.post('http://localhost:8000/api/people', {
            firstName,
            lastName
        })
            .then(res=>console.log(res))
            .catch(err=>console.log(err))
    }
    //onChange to update firstName and lastName
    return (
        <form onSubmit={onSubmitHandler}>
            <p>
                <label>First Name</label><br/>
                <input type="text" onChange={(e)=>setFirstName(e.target.value)} value={firstName}/>
            </p>
            <p>
                <label>Last Name</label><br/>
                <input type="text" onChange={(e)=>setLastName(e.target.value)} value={lastName}/>
            </p>
            <input type="submit"/>
        </form>
    )
}




honorable mentions :


to check the database you have two options:


Using the cmd console:

cd c:/"Program Files"/MongoDB/Server/<version_number>/bin/
mongo.exe
show dbs
use <db name>
show collections
db.<name of collection>.find() ----->>this will show you all the created objects as JSON

Using MongoDB compass:

open the application and press and connect
then navigate to the name of your database
to see the collections inside it














